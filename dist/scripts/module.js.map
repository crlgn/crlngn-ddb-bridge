{"version":3,"file":"module.js","sources":["../../src/constants/DDBGL.mjs","../../src/constants/General.mjs","../../src/constants/Hooks.mjs","../../src/components/GeneralUtil.mjs","../../src/components/LogUtil.mjs","../../src/components/ActivityUtil.mjs","../../src/components/Main.mjs","../../src/module.mjs"],"sourcesContent":["export const DDBGL_CLS = {\n  toHit: { label: \"to hit\", activityType: \"attack\", rollType: \"attack\" },\n  damage: { label: \"damage\", activityType: \"attack\", rollType: \"damage\" },\n  heal: { label: \"heal\", activityType: \"heal\", rollType: \"heal\" },\n  save: { label: \"save\", activityType: \"\", rollType: \"ability\" },\n  check: { label: \"check\", activityType: \"\", rollType: \"skill\" }\n}\n","export const MODULE_ID = \"carolingian-rolls\";\nexport const MODULE_TITLE = \"Carolingian Rolls\";\nexport const MODULE_SHORT = \"crlgn-rolls\";\nexport const DEBUG_TAG = [\n  `%cCrlgn Rolls`,\n  `color: #003377; font-weight: bold;`,\n  `|`,\n];\n\nexport const ACTIVITY_TYPES = {\n  attack: 'attack'\n}\n\nexport const ROLL_TYPES = {\n  abilityCheck: \"ability\",\n  abilitySave: \"save\",\n  attack: \"attack\",\n  check: \"check\",\n  concentration: \"concentration\",\n  damage: \"damage\",\n  deathSave: \"death\",\n  formula: \"formula\",\n  healing: \"healing\",\n  custom: \"roll\",\n  skillCheck: \"skill\",\n  toolCheck: \"tool\"\n}\n\nexport const CLASS_PREFIX = 'crlgn';","/**\n * Foundry Core hooks\n * https://foundryvtt.com/api/classes/client.Hooks.html\n * https://foundryvtt.com/api/modules/hookEvents.html\n * */ \nexport const HOOKS_CORE = {\n  CHAT_MESSAGE: \"chatMessage\", \n  INIT: \"init\", \n  READY: \"ready\", \n  PRE_CREATE_CHAT_MESSAGE: \"preCreateChatMessage\", \n  RENDER_CHAT_MESSAGE: \"renderChatMessage\" \n}\n\n/**\n * Hooks for DnD5e 4.x\n * According to https://github.com/foundryvtt/dnd5e/wiki/Hooks\n */\nexport const HOOKS_DND5E ={\n    // Rolls\n    PRE_ROLL_ABILITY_TEST: \"dnd5e.preRollAbilityTest\",\n    PRE_ROLL_ABILITY_SAVE: \"dnd5e.preRollAbilitySave\",\n    PRE_ROLL_ATTACK_V2: \"dnd5e.preRollAttackV2\",\n    PRE_ROLL_CLASS_HIT_POINTS: \"dnd5e.preRollClassHitPoints\",\n    PRE_ROLL_CONCENTRATION: \"dnd5e.preRollConcentration\",\n    PRE_ROLL_DAMAGE_V2: \"dnd5e.preRollDamageV2\",\n    PRE_ROLL_DEATH_SAVE: \"dnd5e.preRollDeathSave\",\n    PRE_ROLL_FORMULA_V2: \"dnd5e.preRollFormulaV2\", \n    PRE_ROLL_HIT_DIE_V2: \"dnd5e.preRollHitDieV2\",\n    PRE_ROLL_INITIATIVE: \"dnd5e.preRollInitiative\",\n    PRE_ROLL_NPC_HIT_POINTS: \"dnd5e.preRollNPCHitPoints\",\n    PRE_ROLL_RECHARGE_V2: \"dnd5e.preRollRechargeV2\",\n    PRE_ROLL_SKILL: \"dnd5e.preRollSkill\",\n    PRE_ROLL_TOOL_CHECK: \"dnd5e.preRollToolCheck\",\n    PRE_USE_ITEM: \"dnd5e.preUseItem\",\n    ROLL_ABILITY_TEST: \"dnd5e.rollAbilityTest\",\n    ROLL_ABILITY_SAVE: \"dnd5e.rollAbilitySave\",\n    ROLL_ATTACK_V2: \"dnd5e.rollAttackV2\",\n    ROLL_CLASS_HIT_POINTS: \"dnd5e.rollClassHitPoints\",\n    ROLL_CONCENTRATION: \"dnd5e.rollConcentration\",\n    ROLL_DEATH_SAVE: \"dnd5e.rollDeathSave\",\n    ROLL_DAMAGE_V2: \"dnd5e.rollDamageV2\",\n    ROLL_FORMULA_V2: \"dnd5e.rollFormulaV2\", \n    ROLL_HIT_DIE_V2: \"dnd5e.rollHitDieV2\",\n    ROLL_INITIATIVE: \"dnd5e.rollInitiative\",\n    ROLL_NPC_HIT_POINTS: \"dnd5e.rollNPCHitPoints\",\n    ROLL_RECHARGE_V2: \"dnd5e.rollRechargeV2\",\n    ROLL_SKILL: \"dnd5e.rollSkill\",\n    ROLL_TOOL_CHECK: \"dnd5e.rollToolCheck\",\n\n    // Rendering / Chat Messages\n    DISPLAY_CARD: \"dnd5e.preDisplayCardV2\",\n    PRE_DISPLAY_CARD_V2: \"dnd5e.preDisplayCardV2\",\n    RENDER_CHAT_MESSAGE: \"dnd5e.renderChatMessage\",\n\n    // Rest\n    PRE_LONG_REST: \"dnd5e.preLongRest\",\n    PRE_REST_COMPLETED: \"dnd5e.preRestCmpleted\",\n    PRE_SHORT_REST: \"dnd5e.preShortRest\",\n    REST_COMPLETED: \"dnd5e.restCmpleted\",\n\n    // Activities\n    ACTIVITY_CONSUMPTION: \"dnd5e.activityConsumption\",\n    POST_ACTIVITY_CONSUMPTION: \"dnd5e.postActivityConsumption\",\n    POST_CREATE_USAGE_MESSAGE: \"dnd5e.postCreateUsageMessage\",\n    POST_USE_ACTIVITY: \"dnd5e.postUseActivity\",\n    PRE_ACTIVITY_CONSUMPTION: \"dnd5e.preActivityConsumption\",\n    PRE_CREATE_USAGE_MESSAGE: \"dnd5e.preCreateUsageMessage\",\n    PRE_USE_ACTIVITY: \"dnd5e.preUseActivity\",\n\n}\n\nexport const HOOKS_DDBGL = {\n  PENDING_ROLL: \"ddb-game-log.pendingRoll\",\n  FULFILLED_ROLL: \"ddb-game-log.fulfilledRoll\"\n}","\nexport class GeneralUtil {\n  /**\n   * Identifies the current selected or targeted tokens\n   * @returns {Set} A set of targeted tokens\n   */\n  static getTargets(user) {\n    let targetTokens = game.user.targets || user.targets || game.user.selected || user.selected || [];\n\n    return new Set([...targetTokens]);\n  }\n\n\n  /**\n  * Grab the targeted tokens and return relevant information on them.\n  * @returns {TargetDescriptor[]}\n  */\n  static getTargetDescriptors() {\n   const targets = new Map();\n   for ( const token of game.user.targets ) {\n     const { name } = token;\n     const { img, system, uuid, statuses } = token.actor ?? {};\n     if ( uuid ) {\n       const ac = statuses.has(\"coverTotal\") ? null : system.attributes?.ac?.value;\n       targets.set(uuid, { name, img, uuid, ac: ac ?? null });\n     }\n   }\n   return Array.from(targets.values());\n }\n\n/**\n * Checks if module is currently installed and active\n * @param {string} moduleName \n * @returns \n */\n  static isModuleOn(moduleName){\n    const module = game.modules?.get(moduleName);\n    return module ? true : false;\n  }\n}\n\n","import { DEBUG_TAG } from \"../constants/General.mjs\";\n\nexport class LogUtil {\n    /**\n     * Outputs information on console, adding module name and reference\n     * @param {string} ref - Reference information to log after module name\n     * @param {any[]} data - data to log on console\n     */\n    static log(ref=\"\", data=[]){\n      console.log(...DEBUG_TAG, ref, ...data);\n    }\n\n    /**\n     * Outputs information on console, adding module name and reference\n     * @param {string} ref - Reference information to log after module name\n     * @param {any[]} data - data to log on console\n     */\n    static warn(ref=\"\", data=[]){\n      console.warn(...DEBUG_TAG, ref, ...data);\n    }\n\n    /**\n     * Logs an error on the console and/or ui notification\n     * @param {string} strRef - Reference string for the error. \n     * @param {object} options - \n     */\n    static logError(strRef, options){ // = { ui:false, console:true, permanent:false }) {\n        if(options.ui){\n            console.log(ui.notifications);\n            // ui.notifications?.error(strRef, { localize: true, permanent: options.permanent });\n        }\n        if(options.console) console.error(...DEBUG_TAG, strRef);\n    }\n}\n\n","import { DDBGL_CLS } from \"../constants/DDBGL.mjs\";\nimport { ACTIVITY_TYPES, MODULE_SHORT, ROLL_TYPES } from \"../constants/General.mjs\";\nimport { GeneralUtil } from \"./GeneralUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { RollUtil } from \"./RollUtil.mjs\";\n\nexport class ActivityUtil {\n\n  static init(){\n\n  }\n  /**\n   * \n   **/\n  static forwardAction = async (ddbglCls, activities, msg, msgConfig) => {\n    let activityArray = [];\n    let selectedActivity = null;\n    LogUtil.log(\"forwardAction\", [{...msg}, msgConfig]); \n    let originalRoll, dialogConfig, rollConfig, activityRolls, rollData;\n\n\n    // find the appropriate activity according to the roll description from DDB Gamelog\n    switch(ddbglCls){ \n      case DDBGL_CLS.toHit.label: // is attack\n        selectedActivity = activities.find( act => act.type === DDBGL_CLS.toHit.activityType );\n\n        originalRoll = msg.rolls[0];\n\n        dialogConfig = {\n          configure:false\n        };\n\n        rollConfig = {\n          rolls: [originalRoll],\n          formula: originalRoll.formula,\n          flags: {\n            ...msg.flags,\n            [MODULE_SHORT]: {\n              originalRoll: [originalRoll],\n              temporary: true\n            },\n            dnd5e: {\n              ...msg.flags.dnd5e,\n              messageType: \"roll\",\n              roll: { type: \"attack\" },\n              targets: GeneralUtil.getTargetDescriptors()\n            }\n          }\n        }\n        activityRolls = await selectedActivity.rollAttack(rollConfig, dialogConfig, { create: false });\n        \n        // delete msg.flags['ddb-game-log'];\n\n        activityRolls[0].terms = originalRoll.terms;\n        /*activityRolls[0].terms.map((t,i)=>{\n          let term = t;\n          term.evaluated = true;\n          if(term instanceof Die){\n            term = originalRoll.terms[i];\n            term._formula = originalRoll.terms[i].formula;\n            term.results = originalRoll.terms[i].results;\n            term._evaluateSync({strict: false});\n            // term.resetFormula();\n          }\n          return term;\n        });*/\n        \n        activityRolls[0]._total = activityRolls[0]._evaluateTotal();\n        activityRolls[0].resetFormula();\n\n        rollData = {\n          rolls: activityRolls,\n          formula: activityRolls[0].formula,\n          flavor: msg.flavor,\n          speaker: msg.speaker,\n          whisper: msg.whisper,\n          user: game.user,\n          blind: msg.blind,\n          flags: {\n            ...msg.flags,\n            [MODULE_SHORT]: {\n              originalRoll: [originalRoll]\n            },\n            dnd5e: {\n              ...msg.flags.dnd5e,\n              messageType: \"roll\",\n              roll: { type: \"attack\" },\n              targets: GeneralUtil.getTargetDescriptors()\n            }\n          }\n        }\n\n        await activityRolls[0].toMessage(rollData);\n        break; \n      case DDBGL_CLS.damage.label: // is damage roll\n        selectedActivity = activities.find( act => act.type === DDBGL_CLS.toHit.activityType );\n        LogUtil.log(\"forwardAction - \" + DDBGL_CLS.damage.label, [msg.rolls]);\n\n        originalRoll = msg.rolls[0];\n\n        dialogConfig = {\n          configure:false\n        };\n\n        rollConfig = {\n          // class: 'DamageRoll',\n          rolls: [originalRoll],\n          flags: {\n            ...msg.flags,\n            [MODULE_SHORT]: {\n              originalRoll: [originalRoll],\n              temporary: true\n            },\n            dnd5e: {\n              ...msg.flags.dnd5e,\n              messageType: \"roll\",\n              roll: { type: \"damage\" },\n              targets: GeneralUtil.getTargetDescriptors(),\n              scaling: msg.flags.dnd5e?.scaling ?? 0\n            }\n          },\n          isCritical: msg.flags['ddb-game-log']?.isCritical ?? false,\n          scaling: msg.flags.dnd5e?.scaling ?? 0\n        }\n\n        dialogConfig = { \n            configure: false \n        }\n\n        LogUtil.log(\"DamageRoll\", [game.dnd5e.dice.DamageRoll]);\n        activityRolls = await selectedActivity.rollDamage({\n          isCritical:rollConfig.isCritical, scaling: rollConfig.scaling\n        }, dialogConfig, { \n          create: false, data: { flags: rollConfig.flags } \n        });\n        \n\n        // delete msg.flags['ddb-game-log'];\n        activityRolls[0].terms = originalRoll.terms;\n        /*\n        activityRolls[0].terms.map((t,i)=>{\n          let term = t;\n          if(term instanceof Die){\n            term._formula = originalRoll.terms[i].formula;\n            term.results = originalRoll.terms[i].results;\n            term._evaluateSync({strict: false});\n            // term.resetFormula();\n            LogUtil.log('TERM', [DiceTerm, term])\n          }\n          term.evaluated = true;\n          return term;\n        });\n        */\n        \n        activityRolls[0]._total = activityRolls[0]._evaluateTotal();\n        activityRolls[0].resetFormula();\n\n        rollData = {\n          rolls: activityRolls,\n          formula: activityRolls[0].formula,\n          flavor: msg.flavor,\n          speaker: msg.speaker,\n          whisper: msg.whisper,\n          user: game.user,\n          blind: msg.blind,\n          flags: {\n            ...msg.flags,\n            [MODULE_SHORT]: {\n              originalRoll: [originalRoll]\n            },\n            dnd5e: {\n              ...msg.flags.dnd5e,\n              messageType: \"roll\",\n              roll: { type: \"damage\" },\n              targets: GeneralUtil.getTargetDescriptors()\n            }\n          }\n        }\n\n        await activityRolls[0].toMessage(rollData);\n        LogUtil.log(\"forwardAction - \" + DDBGL_CLS.damage, [rollData]);\n        break;\n      default: \n        // \n    } \n\n    // if no matching activity was found, use the first one on the list \n    if(!selectedActivity){ \n      activityArray = Array.from(activities); \n      return activityArray[0] || null; \n    } \n\n    return selectedActivity; \n  } \n\n  /**\n   * \n   * @param {Activity} rollActivity \n   * @param {*} config {usage?, dialog?, msg?}\n   */\n  static async fastForwardActivity(rollActivity, config){\n    config = {\n      ...config,\n      dialog: {\n        ...config.dialog,\n        configure: false\n      },\n      msg: {\n        ...config.msg, \n        create: true\n      }\n    }\n\n    LogUtil.log(\"RollUtil.fastForwardActivity\", [rollActivity.type, config]);\n\n    switch(rollActivity.type){\n      case ACTIVITY_TYPES.attack:\n        const rolls = await rollActivity.rollAttack(config.usage||{}, config.dialog||{}, config.msg||{});\n        LogUtil.log(\"ActivityUtil.fastForwardActivity - rolls\", [rolls]); \n        break;\n      default:\n        //\n        LogUtil.log(\"ActivityUtil.fastForwardActivity - Activity not configured\", []); \n    }\n  }\n\n  /*\n  static setRenderFlags = (activity:Activity, message:GenericObject) => {\n    if (!message.data.flags || !message.data.flags[MODULE_SHORT]) {\n        return;\n    }\n    \n    if (!message.data.flags[MODULE_SHORT].quickRoll) {\n        return;\n    }        \n\n    const hasAttack = activity.hasOwnProperty(ROLL_TYPES.attack);\n    const hasDamage = activity.hasOwnProperty(ROLL_TYPES.damage);\n    const hasHealing = activity.hasOwnProperty(ROLL_TYPES.healing);\n    const hasFormula = activity.hasOwnProperty(ROLL_TYPES.formula);\n\n    if (hasAttack) {            \n      message.data.flags[MODULE_SHORT].renderAttack = true;\n    }\n\n    if (hasDamage && activity[ROLL_TYPES.damage]?.parts?.length > 0) {\n        message.data.flags[MODULE_SHORT].renderDamage = !message.data.flags[MODULE_SHORT].manualDamage;\n    }\n\n    if (hasHealing) {\n        message.data.flags[MODULE_SHORT].isHealing = true;\n        message.data.flags[MODULE_SHORT].renderDamage = true; \n    }\n\n    if (hasFormula && activity[ROLL_TYPES.formula]?.formula !== '') {\n        message.data.flags[MODULE_SHORT].renderFormula = true;\n\n        if (activity.roll?.name && activity.roll.name !== \"\") {\n            message.data.flags[MODULE_SHORT].formulaName = activity.roll?.name;\n        }\n    }\n  }\n  */\n\n\n}\n\n\n/**\n * \n **/\nconst forwardAction = (ddbglCls, activities, config) => {\n  let activityArray = [];\n  let selectedActivity = null;\n  \n  // find the appropriate activity according to the roll description from DDB Gamelog\n  switch(ddbglCls){ \n    case DDBGL_CLS.toHit.label: // is attack\n      selectedActivity = activities.find( act => act.type === DDBGL_CLS.toHit.activityType );\n      ActivityUtil.fastForwardActivity(selectedActivity, {  });\n      LogUtil.log(\"getActivityFromAction\");\n      break; \n    case DDBGL_CLS.damage.label: // is attack damage\n      selectedActivity = activities.find( act => act.type === DDBGL_CLS.toHit.activityType );\n      ActivityUtil.fastForwardActivity(selectedActivity, { });\n      LogUtil.log(\"getActivityFromAction\");\n    default: \n      // \n  } \n\n  // if no matching activity was found, use the first one on the list \n  if(!selectedActivity){ \n    activityArray = Array.from(activities); \n    return activityArray[0] || null; \n  } \n\n  return selectedActivity; \n} \n","import { ROLL_MSG_STATES } from \"../constants/ChatMessage.mjs\";\nimport { DDBGL_CLS } from \"../constants/DDBGL.mjs\";\nimport { ACTIVITY_TYPES, MODULE_SHORT } from \"../constants/General.mjs\";\n\nimport { HOOKS_CORE, HOOKS_DDBGL, HOOKS_DND5E } from \"../constants/Hooks.mjs\";\nimport { ActivityUtil } from \"./ActivityUtil.mjs\";\nimport { ChatUtil } from \"./ChatUtil.mjs\";\nimport { LogUtil } from \"./LogUtil.mjs\";\nimport { RollUtil } from \"./RollUtil.mjs\";\n\nexport class Main {\n\n  static registerHooks(){\n\n    Hooks.once(HOOKS_CORE.INIT,()=>{\n      LogUtil.log(\"Initiating module\",[CONFIG]);\n\n      Main.registerActivityHooks();\n      Main.registerRollHooks();\n      Main.registerChatHooks();\n      // Main.registerDDBGLHooks();\n\n      ActivityUtil.init();\n    })\n  }\n\n  // static registerDDBGLHooks(){\n  //   Hooks.on(HOOKS_DDBGL.FULFILLED_ROLL, (data:any) => {\n  //     LogUtil.log(HOOKS_DDBGL.FULFILLED_ROLL, [data]);\n  //   });\n  //   // LogUtil.log(\"registerDDBGLHooks\");\n  // }\n\n  static registerActivityHooks(){\n    Hooks.on(HOOKS_DND5E.PRE_USE_ACTIVITY, onPreUseActivity);\n    Hooks.on(HOOKS_DND5E.POST_USE_ACTIVITY, onPostUseActivity);\n  }\n\n  static registerRollHooks(){\n    Hooks.on(HOOKS_DND5E.ROLL_ATTACK_V2, onRollAttack);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, onPreRollAttack);\n    Hooks.on(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, onPreRollDamage);\n  }\n\n  static registerChatHooks(){\n    Hooks.on(HOOKS_DND5E.RENDER_CHAT_MESSAGE, onRenderChatMessage); \n    Hooks.on(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, onPreCreateChatMessage); \n  }\n\n}\n\nconst onPreUseActivity = async (\n  activity, usageConfig, dialogConfig, msgConfig\n) => {\n  // if(msgConfig && msgConfig.data && msgConfig.data.flags){\n  //   msgConfig.data.flags[MODULE_SHORT] = {\n  //     fastForwardActivity: true,\n  //     state: ROLL_MSG_STATES.preUse\n  //   }\n  // }\n  if(dialogConfig){\n    dialogConfig.configure = false\n  }\n  LogUtil.log(HOOKS_DND5E.PRE_USE_ACTIVITY, [ activity, usageConfig, dialogConfig, msgConfig ]);\n  \n  // if(activity.type === ACTIVITY_TYPES.attack){\n  //   // const rolls = await activity.rollAttack(usageConfig || {}, dialogConfig || {}, msgConfig || {});\n  // }\n  // ActivityUtil.fastForwardActivity(activity, {\n  //   usage: usageConfig,\n  //   dialog: {...dialogConfig, configure: false},\n  //   msg: msgConfig\n  // }); \n\n  return true;\n}\n\nconst onPostUseActivity = async(\n  activity, usageConfig, result\n) => {\n  LogUtil.log(HOOKS_DND5E.POST_USE_ACTIVITY, [activity, usageConfig, result]);\n\n  // RollUtil.fastForwardRoll(activity, {\n  //   usage: usageConfig\n  // });\n  // return;\n  return true;\n}\n\n/**\n * Right before a message is created. \n * \n * @param {ChatMessage5e} chatMessage \n * @param {GenericObject} msgConfig \n * @param {GenericObject} options\n * @param {String} userId\n */\nconst onPreCreateChatMessage = (chatMessage, msgConfig, options, userId) => {\n  let isDDBGL = false;\n  let activities, activity, actor, ddbglCls, itemId, item, isCrlngn;\n  \n  const msg = { ...chatMessage };\n  ddbglCls = chatMessage.getFlag(\"ddb-game-log\",\"cls\"); // does the flag exist?\n  isCrlngn = chatMessage.getFlag(MODULE_SHORT, \"originalRoll\");\n\n  LogUtil.log(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, [ \n    chatMessage, ddbglCls\n  ]);\n\n  if(ddbglCls && !isCrlngn){ \n    isDDBGL = true; \n    actor = msgConfig.actor; \n    itemId =  msgConfig.flags?.[\"ddb-game-log\"]?.[\"itemId\"] || \"\"; \n    \n    LogUtil.log(HOOKS_CORE.PRE_CREATE_CHAT_MESSAGE, [ \n      actor, itemId\n    ]);\n    if(actor && itemId){\n      item = actor.items.find((it) => it.id == itemId);\n      \n      activities = item?.system?.activities || null; \n      LogUtil.log(\"activities\", [itemId, activities]);\n      activity = activities ? ActivityUtil.forwardAction(ddbglCls, activities, msg, msgConfig) : null;\n    } \n  } \n\n  return !isDDBGL;\n}\n\nconst onRenderChatMessage = (a, b, c, d) => {\n  LogUtil.log(HOOKS_DND5E.RENDER_CHAT_MESSAGE,[a,b,c,d])\n}\n\n// \n// const onPreCreateUsageMessage = (activity:Activity, messageConfig:ActivityMessageConfiguration) => {\n\n// }\n\n\n// /**\n//  * Triggered when a message is rendered\n//  * @param a \n//  * @param b \n//  * @param c \n//  * @param d \n//  */\n// const onRenderChatMessage = (a: any, b: any, c: any, d: any) => {\n//   LogUtil.log(HOOKS_CORE.RENDER_CHAT_MESSAGE, [a, b, c, d]);\n// }\n\n/** \n * Rolls \n * */\nconst onPreRollAttack = (\n  config, dialog, message\n) =>{\n  LogUtil.log(HOOKS_DND5E.PRE_ROLL_ATTACK_V2, [config, dialog, message]);\n  dialog.configure = false;\n  return true\n}\n\nconst onPreRollDamage = (\n  config, dialog, message\n) =>{\n  LogUtil.log(HOOKS_DND5E.PRE_ROLL_DAMAGE_V2, [config, dialog, message]);\n  dialog.configure = false;\n  return true;\n}\n\n/**\n * rollAttackV2 hook callback\n * @param {D20Roll[]} rolls \n * @param {AttackRollData} data\n */\nconst onRollAttack = async(rolls, data) => {\n  LogUtil.log(HOOKS_DND5E.ROLL_ATTACK_V2, [rolls, data]);\n  // ChatUtil.processChatCard(rolls, data);\n}","import \"./styles/main.css\";\nimport \"./styles/chat.css\";\nimport { Main } from \"./components/Main.mjs\";\n\nMain.registerHooks();\n/*\nconst token = canvas.tokens.controlled[0];\nconst weapon = token.actor.items.find((it,i)=>it.name==\"Warhammer\");\nconst activity = weapon?.system.activities.getByType(\"attack\")[0];\n\nconsole.log('canvas.tokens', canvas.tokens);\nconst rollConfig = {\n   flags: {\n     dnd5e: {\n       messageType: \"roll\",\n       roll: { type: \"attack\" }\n     }\n   },\n   user: game.user,\n   flavor: `<span>${weapon.name}</span>`,\n   user: game.user.id,\n   speaker: {\n     actor: \"mnmr5ubAypEwlg1K\",\n     alias: \"Guntred\",\n     scene: \"sLKv97LIez7YMBVO\",\n     token: \"lGRRRhBJ85Bw1dXy\"\n   }\n}\nconst actRolls = await activity.rollAttack(rollConfig, { configure:false }, { create: false });\n\nconst rollData = {\n   ...rollConfig,\n   rolls: actRolls,\n   flags: {\n    dnd5e: {\n      roll: { type: \"attack\" },\n      targets: [\n         {\n            name: \"Ghost\",\n            img: \"https://www.dndbeyond.com/avatars/30783/918/638062023594890763.png?1733989892125\",\n            uuid: \"Scene.sLKv97LIez7YMBVO.Token.Fx3Ty8JYST9m9nxD.Actor.MXrFGTfENV49a166\",\n            ac: 11\n         }\n      ]\n    }\n   }\n}\nawait ChatMessage.create(rollData);\n\nconst visibility = game.settings.get(\"dnd5e\", \"attackRollVisibility\");\nconst isVisible = game.user.isGM || (visibility !== \"none\");\nconsole.log('Attack results visible', isVisible, visibility);\n*/"],"names":["DDBGL_CLS","MODULE_SHORT","DEBUG_TAG","ACTIVITY_TYPES","HOOKS_CORE","HOOKS_DND5E","GeneralUtil","user","targetTokens","_a","_b","targets","token","name","img","system","uuid","statuses","ac","moduleName","LogUtil","ref","data","strRef","options","ActivityUtil","rollActivity","config","rolls","__publicField","ddbglCls","activities","msg","msgConfig","_c","activityArray","selectedActivity","originalRoll","dialogConfig","rollConfig","activityRolls","rollData","act","Main","onPreUseActivity","onPostUseActivity","onRollAttack","onPreRollAttack","onPreRollDamage","onRenderChatMessage","onPreCreateChatMessage","activity","usageConfig","result","chatMessage","userId","isDDBGL","actor","itemId","item","isCrlngn","it","b","c","d","dialog","message"],"mappings":"oKAAO,MAAMA,EAAY,CACvB,MAAO,CAAE,MAAO,SAAU,aAAc,SAAU,SAAU,QAAU,EACtE,OAAQ,CAAE,MAAO,SAAU,aAAc,SAAU,SAAU,QAAU,EACvE,KAAM,CAAE,MAAO,OAAQ,aAAc,OAAQ,SAAU,MAAQ,EAC/D,KAAM,CAAE,MAAO,OAAQ,aAAc,GAAI,SAAU,SAAW,EAC9D,MAAO,CAAE,MAAO,QAAS,aAAc,GAAI,SAAU,OAAS,CAChE,ECJaC,EAAe,cACfC,EAAY,CACvB,gBACA,qCACA,GACF,EAEaC,EAAiB,CAC5B,OAAQ,QACV,ECNaC,EAAa,CACxB,aAAc,cACd,KAAM,OACN,MAAO,QACP,wBAAyB,uBACzB,oBAAqB,mBACvB,EAMaC,EAAa,CAEtB,sBAAuB,2BACvB,sBAAuB,2BACvB,mBAAoB,wBACpB,0BAA2B,8BAC3B,uBAAwB,6BACxB,mBAAoB,wBACpB,oBAAqB,yBACrB,oBAAqB,yBACrB,oBAAqB,wBACrB,oBAAqB,0BACrB,wBAAyB,4BACzB,qBAAsB,0BACtB,eAAgB,qBAChB,oBAAqB,yBACrB,aAAc,mBACd,kBAAmB,wBACnB,kBAAmB,wBACnB,eAAgB,qBAChB,sBAAuB,2BACvB,mBAAoB,0BACpB,gBAAiB,sBACjB,eAAgB,qBAChB,gBAAiB,sBACjB,gBAAiB,qBACjB,gBAAiB,uBACjB,oBAAqB,yBACrB,iBAAkB,uBAClB,WAAY,kBACZ,gBAAiB,sBAGjB,aAAc,yBACd,oBAAqB,yBACrB,oBAAqB,0BAGrB,cAAe,oBACf,mBAAoB,wBACpB,eAAgB,qBAChB,eAAgB,qBAGhB,qBAAsB,4BACtB,0BAA2B,gCAC3B,0BAA2B,+BAC3B,kBAAmB,wBACnB,yBAA0B,+BAC1B,yBAA0B,8BAC1B,iBAAkB,sBAEtB,ECpEO,MAAMC,CAAY,CAKvB,OAAO,WAAWC,EAAM,CACtB,IAAIC,EAAe,KAAK,KAAK,SAAWD,EAAK,SAAW,KAAK,KAAK,UAAYA,EAAK,UAAY,CAAA,EAE/F,OAAO,IAAI,IAAI,CAAC,GAAGC,CAAY,CAAC,CACjC,CAOD,OAAO,sBAAuB,CHjBzB,IAAAC,EAAAC,EGkBJ,MAAMC,EAAU,IAAI,IACpB,UAAYC,KAAS,KAAK,KAAK,QAAU,CACvC,KAAM,CAAE,KAAAC,CAAM,EAAGD,EACX,CAAE,IAAAE,EAAK,OAAAC,EAAQ,KAAAC,EAAM,SAAAC,CAAQ,EAAKL,EAAM,OAAS,GACvD,GAAKI,EAAO,CACV,MAAME,EAAKD,EAAS,IAAI,YAAY,EAAI,MAAOP,GAAAD,EAAAM,EAAO,aAAP,YAAAN,EAAmB,KAAnB,YAAAC,EAAuB,MACtEC,EAAQ,IAAIK,EAAM,CAAE,KAAAH,EAAM,IAAAC,EAAK,KAAAE,EAAM,GAAIE,GAAM,IAAI,CAAE,CACtD,CACF,CACD,OAAO,MAAM,KAAKP,EAAQ,OAAQ,CAAA,CACnC,CAOA,OAAO,WAAWQ,EAAW,CHnCxB,IAAAV,EGqCH,MAAO,IADQA,EAAA,KAAK,UAAL,YAAAA,EAAc,IAAIU,GAElC,CACH,CCrCO,MAAMC,CAAQ,CAMjB,OAAO,IAAIC,EAAI,GAAIC,EAAK,CAAA,EAAG,CACzB,QAAQ,IAAI,GAAGpB,EAAWmB,EAAK,GAAGC,CAAI,CACvC,CAOD,OAAO,KAAKD,EAAI,GAAIC,EAAK,CAAA,EAAG,CAC1B,QAAQ,KAAK,GAAGpB,EAAWmB,EAAK,GAAGC,CAAI,CACxC,CAOD,OAAO,SAASC,EAAQC,EAAQ,CACzBA,EAAQ,IACP,QAAQ,IAAI,GAAG,aAAa,EAG7BA,EAAQ,SAAS,QAAQ,MAAM,GAAGtB,EAAWqB,CAAM,CACzD,CACL,CC3BO,MAAME,CAAa,CAExB,OAAO,MAAM,CAEZ,CA8LD,aAAa,oBAAoBC,EAAcC,EAAO,CAepD,OAdAA,EAAS,CACP,GAAGA,EACH,OAAQ,CACN,GAAGA,EAAO,OACV,UAAW,EACZ,EACD,IAAK,CACH,GAAGA,EAAO,IACV,OAAQ,EACT,CACF,EAEDP,EAAQ,IAAI,+BAAgC,CAACM,EAAa,KAAMC,CAAM,CAAC,EAEhED,EAAa,KAAI,CACtB,KAAKvB,EAAe,OAClB,MAAMyB,EAAQ,MAAMF,EAAa,WAAWC,EAAO,OAAO,CAAA,EAAIA,EAAO,QAAQ,CAAE,EAAEA,EAAO,KAAK,CAAE,CAAA,EAC/FP,EAAQ,IAAI,2CAA4C,CAACQ,CAAK,CAAC,EAC/D,MACF,QAEER,EAAQ,IAAI,6DAA8D,CAAA,CAAE,CAC/E,CACF,CAyCH,CA3PES,EARWJ,EAQJ,gBAAgB,MAAOK,EAAUC,EAAYC,EAAKC,IAAc,CLdlE,IAAAxB,EAAAC,EAAAwB,EKeH,IAAIC,EAAgB,CAAA,EAChBC,EAAmB,KACvBhB,EAAQ,IAAI,gBAAiB,CAAC,CAAC,GAAGY,CAAG,EAAGC,CAAS,CAAC,EAClD,IAAII,EAAcC,EAAcC,EAAYC,EAAeC,EAI3D,OAAOX,EAAQ,CACb,KAAK9B,EAAU,MAAM,MACnBoC,EAAmBL,EAAW,KAAMW,GAAOA,EAAI,OAAS1C,EAAU,MAAM,cAExEqC,EAAeL,EAAI,MAAM,CAAC,EAE1BM,EAAe,CACb,UAAU,EACpB,EAEQC,EAAa,CACX,MAAO,CAACF,CAAY,EACpB,QAASA,EAAa,QACtB,MAAO,CACL,GAAGL,EAAI,MACP,CAAC/B,CAAY,EAAG,CACd,aAAc,CAACoC,CAAY,EAC3B,UAAW,EACZ,EACD,MAAO,CACL,GAAGL,EAAI,MAAM,MACb,YAAa,OACb,KAAM,CAAE,KAAM,QAAU,EACxB,QAAS1B,EAAY,qBAAsB,CAC5C,CACF,CACF,EACDkC,EAAgB,MAAMJ,EAAiB,WAAWG,EAAYD,EAAc,CAAE,OAAQ,EAAK,CAAE,EAI7FE,EAAc,CAAC,EAAE,MAAQH,EAAa,MActCG,EAAc,CAAC,EAAE,OAASA,EAAc,CAAC,EAAE,iBAC3CA,EAAc,CAAC,EAAE,eAEjBC,EAAW,CACT,MAAOD,EACP,QAASA,EAAc,CAAC,EAAE,QAC1B,OAAQR,EAAI,OACZ,QAASA,EAAI,QACb,QAASA,EAAI,QACb,KAAM,KAAK,KACX,MAAOA,EAAI,MACX,MAAO,CACL,GAAGA,EAAI,MACP,CAAC/B,CAAY,EAAG,CACd,aAAc,CAACoC,CAAY,CAC5B,EACD,MAAO,CACL,GAAGL,EAAI,MAAM,MACb,YAAa,OACb,KAAM,CAAE,KAAM,QAAU,EACxB,QAAS1B,EAAY,qBAAsB,CAC5C,CACF,CACF,EAED,MAAMkC,EAAc,CAAC,EAAE,UAAUC,CAAQ,EACzC,MACF,KAAKzC,EAAU,OAAO,MACpBoC,EAAmBL,EAAW,KAAMW,GAAOA,EAAI,OAAS1C,EAAU,MAAM,cACxEoB,EAAQ,IAAI,mBAAqBpB,EAAU,OAAO,MAAO,CAACgC,EAAI,KAAK,CAAC,EAEpEK,EAAeL,EAAI,MAAM,CAAC,EAE1BM,EAAe,CACb,UAAU,EACpB,EAEQC,EAAa,CAEX,MAAO,CAACF,CAAY,EACpB,MAAO,CACL,GAAGL,EAAI,MACP,CAAC/B,CAAY,EAAG,CACd,aAAc,CAACoC,CAAY,EAC3B,UAAW,EACZ,EACD,MAAO,CACL,GAAGL,EAAI,MAAM,MACb,YAAa,OACb,KAAM,CAAE,KAAM,QAAU,EACxB,QAAS1B,EAAY,qBAAsB,EAC3C,UAASG,EAAAuB,EAAI,MAAM,QAAV,YAAAvB,EAAiB,UAAW,CACtC,CACF,EACD,aAAYC,EAAAsB,EAAI,MAAM,cAAc,IAAxB,YAAAtB,EAA2B,aAAc,GACrD,UAASwB,EAAAF,EAAI,MAAM,QAAV,YAAAE,EAAiB,UAAW,CACtC,EAEDI,EAAe,CACX,UAAW,EACd,EAEDlB,EAAQ,IAAI,aAAc,CAAC,KAAK,MAAM,KAAK,UAAU,CAAC,EACtDoB,EAAgB,MAAMJ,EAAiB,WAAW,CAChD,WAAWG,EAAW,WAAY,QAASA,EAAW,OACvD,EAAED,EAAc,CACf,OAAQ,GAAO,KAAM,CAAE,MAAOC,EAAW,KAAO,CAC1D,CAAS,EAIDC,EAAc,CAAC,EAAE,MAAQH,EAAa,MAgBtCG,EAAc,CAAC,EAAE,OAASA,EAAc,CAAC,EAAE,iBAC3CA,EAAc,CAAC,EAAE,eAEjBC,EAAW,CACT,MAAOD,EACP,QAASA,EAAc,CAAC,EAAE,QAC1B,OAAQR,EAAI,OACZ,QAASA,EAAI,QACb,QAASA,EAAI,QACb,KAAM,KAAK,KACX,MAAOA,EAAI,MACX,MAAO,CACL,GAAGA,EAAI,MACP,CAAC/B,CAAY,EAAG,CACd,aAAc,CAACoC,CAAY,CAC5B,EACD,MAAO,CACL,GAAGL,EAAI,MAAM,MACb,YAAa,OACb,KAAM,CAAE,KAAM,QAAU,EACxB,QAAS1B,EAAY,qBAAsB,CAC5C,CACF,CACF,EAED,MAAMkC,EAAc,CAAC,EAAE,UAAUC,CAAQ,EACzCrB,EAAQ,IAAI,mBAAqBpB,EAAU,OAAQ,CAACyC,CAAQ,CAAC,EAC7D,KAGH,CAGD,OAAIL,IACFD,EAAgB,MAAM,KAAKJ,CAAU,EAC9BI,EAAc,CAAC,GAAK,KAI9B,GCvLI,MAAMQ,CAAK,CAEhB,OAAO,eAAe,CAEpB,MAAM,KAAKvC,EAAW,KAAK,IAAI,CAC7BgB,EAAQ,IAAI,oBAAoB,CAAC,MAAM,CAAC,EAExCuB,EAAK,sBAAqB,EAC1BA,EAAK,kBAAiB,EACtBA,EAAK,kBAAiB,CAI5B,CAAK,CACF,CASD,OAAO,uBAAuB,CAC5B,MAAM,GAAGtC,EAAY,iBAAkBuC,CAAgB,EACvD,MAAM,GAAGvC,EAAY,kBAAmBwC,CAAiB,CAC1D,CAED,OAAO,mBAAmB,CACxB,MAAM,GAAGxC,EAAY,eAAgByC,CAAY,EACjD,MAAM,GAAGzC,EAAY,mBAAoB0C,CAAe,EACxD,MAAM,GAAG1C,EAAY,mBAAoB2C,CAAe,CACzD,CAED,OAAO,mBAAmB,CACxB,MAAM,GAAG3C,EAAY,oBAAqB4C,CAAmB,EAC7D,MAAM,GAAG7C,EAAW,wBAAyB8C,CAAsB,CACpE,CAEH,CAEA,MAAMN,EAAmB,MACvBO,EAAUC,EAAad,EAAcL,KAQlCK,IACDA,EAAa,UAAY,IAE3BlB,EAAQ,IAAIf,EAAY,iBAAkB,CAAE8C,EAAUC,EAAad,EAAcL,CAAS,CAAE,EAWrF,IAGHY,EAAoB,MACxBM,EAAUC,EAAaC,KAEvBjC,EAAQ,IAAIf,EAAY,kBAAmB,CAAC8C,EAAUC,EAAaC,CAAM,CAAC,EAMnE,IAWHH,EAAyB,CAACI,EAAarB,EAAWT,EAAS+B,IAAW,CNjGrE,IAAA9C,EAAAC,EAAAwB,EMkGL,IAAIsB,EAAU,GACVzB,EAAsB0B,EAAO3B,EAAU4B,EAAQC,EAAMC,EAEzD,MAAM5B,EAAM,CAAE,GAAGsB,GACjB,OAAAxB,EAAWwB,EAAY,QAAQ,eAAe,KAAK,EACnDM,EAAWN,EAAY,QAAQrD,EAAc,cAAc,EAE3DmB,EAAQ,IAAIhB,EAAW,wBAAyB,CAC9CkD,EAAaxB,CACjB,CAAG,EAEEA,GAAY,CAAC8B,IACdJ,EAAU,GACVC,EAAQxB,EAAU,MAClByB,IAAUhD,GAAAD,EAAAwB,EAAU,QAAV,YAAAxB,EAAkB,kBAAlB,YAAAC,EAAoC,SAAa,GAE3DU,EAAQ,IAAIhB,EAAW,wBAAyB,CAC9CqD,EAAOC,CACb,CAAK,EACED,GAASC,IACVC,EAAOF,EAAM,MAAM,KAAMI,GAAOA,EAAG,IAAMH,CAAM,EAE/C3B,IAAaG,EAAAyB,GAAA,YAAAA,EAAM,SAAN,YAAAzB,EAAc,aAAc,KACzCd,EAAQ,IAAI,aAAc,CAACsC,EAAQ3B,CAAU,CAAC,EACnCA,GAAaN,EAAa,cAAcK,EAAUC,EAAYC,EAAKC,CAAS,IAIpF,CAACuB,CACV,EAEMP,EAAsB,CAAC,EAAGa,EAAGC,EAAGC,IAAM,CAC1C5C,EAAQ,IAAIf,EAAY,oBAAoB,CAAC,EAAEyD,EAAEC,EAAEC,CAAC,CAAC,CACvD,EAsBMjB,EAAkB,CACtBpB,EAAQsC,EAAQC,KAEhB9C,EAAQ,IAAIf,EAAY,mBAAoB,CAACsB,EAAQsC,EAAQC,CAAO,CAAC,EACrED,EAAO,UAAY,GACZ,IAGHjB,EAAkB,CACtBrB,EAAQsC,EAAQC,KAEhB9C,EAAQ,IAAIf,EAAY,mBAAoB,CAACsB,EAAQsC,EAAQC,CAAO,CAAC,EACrED,EAAO,UAAY,GACZ,IAQHnB,EAAe,MAAMlB,EAAON,IAAS,CACzCF,EAAQ,IAAIf,EAAY,eAAgB,CAACuB,EAAON,CAAI,CAAC,CAEvD,EC7KAqB,EAAK,cAAa"}